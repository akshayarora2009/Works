// DS_infixToPostFix.cpp : Defines the entry point for the console application.
// Convert a given infix notation to postfix notation

#include "stdafx.h"
#include<iostream>
#include<stdio.h>
#include<conio.h>
#include<math.h>
using namespace std;
int count;

struct stack
{
	char items[500];
	int top;
};

void push(stack *s,int thing)
{
	if(s->top>=499)
		cout<<"StackOverFlow!";
	else
	{
		s->top++;
		s->items[s->top]=thing;
	}
}

char pop(stack *s)
{
	if(s->top==-1)
	{
		cout<<"Stack empty!";
		return NULL;
	}
	else
	{
		char ch=s->items[s->top];
		s->top--;
		return ch;
	}
}

char op[10]={'+','-','*','/','%','(',')'};
int precedence[10]={0,0,1,1,1,-100,-100};

int GetPrecedence(char a,char b)
{
	int powerofa,powerofb;
	for(int i=0;i<7;i++)
	{
		if(a==op[i])
			powerofa=precedence[i];
		if(b==op[i])
			powerofb=precedence[i];
	}

	if(powerofa>powerofb)
		return -1;
	else
		return 0;

}



int _tmain(int argc, _TCHAR* argv[])
{
	stack s;
	
	s.top=-1;
	char input[50];
	char result[50];
	int ResultCounter=-1;
	int StackCounter=0;
	cout<<"Enter the expression(No spaces allowed): ";
	gets_s(input);
	
	//appending ')' at the end of input expression
	
	for(int i=0;;i++)
	{
		if(input[i]=='\0')
		{
			input[i]=')';
			input[i+1]='\0';
			break;
		}

	}
	
	// Pushing '(' into the stack
	push(&s,'(');
	

	for(int j=0;input[j]!='\0';j++)
	{
		int temp[5],king=-1,another=j+1;
		int number=0;

		if((int)input[j]>=48 && (int)input[j]<=57)
		{
			
			king++;
			temp[king]=(int)input[j]-48;
			
			while((int)input[another]>=48 && (int)input[another]<=57)
			{
				king++;
				temp[king]=(int)input[another]-48;
				another++;
			}

			do
			{
				
				number=number+(temp[king]*(pow(10,king)));
				king--;
			}while(king>=0);
			
			ResultCounter++;
			result[ResultCounter]=(char)((int)'0'+number);
			
		}

		else if(input[j]=='(')
		{
			push(&s,'(');
		}
		else if(input[j]==')')
		{
			char z=pop(&s);
			while(z!='(')
			{
				ResultCounter++;
				result[ResultCounter]=z;
				z=pop(&s);
			}
		}
		else
		{
			
			if(s.top==0)
			{
				push(&s,input[j]);
			}
			else
			{

			char c=pop(&s);
			

			int x=GetPrecedence(input[j],c);
			
			if(x==0)
			{
			while(x==0)
			{
				ResultCounter++;
				result[ResultCounter]=c;

				c=pop(&s);
				
				x=GetPrecedence(input[j],c);
			}
				if(c=='(' || c==')')
				{
				push(&s,c);
				push(&s,input[j]);
				}
			}
			else if(x==-1)
			{
				push(&s,c);
				push(&s,input[j]);
			}
		}
		}

	}
		ResultCounter++;
		result[ResultCounter]='\0';

		for(int p=0;result[p]!='\0';p++)
			cout<<result[p];
		_getch();
	return 0;
}

