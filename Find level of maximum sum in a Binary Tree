// DS_Tree_2.cpp : Defines the entry point for the console application.
// Find the level of maximum sum in a Binary Tree
//

#include "stdafx.h"
#include<stdio.h>
#include<conio.h>
#include<iostream>
using namespace std;

struct node
{
	int name;
	int level;
	node *LeftChild;
	node *RightChild;
};

int levels[500]={0};

void traverse(node *circle)
{
	if(circle==NULL)
		return;


	if(circle->LeftChild!=NULL && circle->RightChild!=NULL)
	{
		return;
	}

	

	cout<<"\nAvailable Node Name: "<<circle->name;
	int choice;
	cout<<"\n Press 1 to create a child. \nPress 2 to not create any child.";
	cin>>choice;
	if(choice==1)
	{
		
		int name;
		cout<<"\nEnter the node name for new leftchild (Enter -1 to not create a leftchild):  ";
		cin>>name;
		if(name!=-1)
		{
			node *p=(node*)malloc(sizeof(node));
			p->name=name;
			p->LeftChild=NULL;
			p->RightChild=NULL;
			
			p->level=circle->level + 1;
			circle->LeftChild=p;
		}
		else
		{

			circle->LeftChild=NULL;


		}
		int name2;
		cout<<"\nEnter the node name for a new Rightchild (Enter -1 to not create a rightchild): ";
		cin>>name2;
		if(name2!=-1)
		{
			node *q=(node*)malloc(sizeof(node));
			q->name=name2;
			q->LeftChild=NULL;
			q->RightChild=NULL;
			
			q->level=circle->level +1;
			circle->RightChild=q;
		}
		else
		{
			circle->RightChild=NULL;
		}
	
	
		traverse(circle->LeftChild);
		traverse(circle->RightChild);
		

	}

	else if(choice==2)
	{

		return;

	}


}






void ConstructTree(node *root)
{
	int rootdata;
	cout<<"Enter value of root (required): ";
	cin>>rootdata;
	root->name=rootdata;
	char ch='y';
	


	while(ch=='y')
	{
		
		traverse(root);

		ch='n';

	}
	cout<<"Construct successful..";
}


void Display(node *root)
{
	if(root==NULL)
		return;

	if(root->LeftChild!=NULL || root->RightChild!=NULL)
	cout<<"Node: "<<root->name<<endl;
	if(root->LeftChild!=NULL)
	cout<<"LeftChild: "<<root->LeftChild->name<<"\t";
	
	if(root->RightChild!=NULL)
	cout<<"RightChild: "<<root->RightChild->name<<"\t";

	cout<<endl;
	Display(root->LeftChild);
	Display(root->RightChild);
}

void WhatLevel(node *root)
{
	if(root==NULL)
		return;

	
	levels[root->level]+=root->name;

	WhatLevel(root->LeftChild);
	WhatLevel(root->RightChild);


}








int _tmain(int argc, _TCHAR* argv[])
{
	node R;
	R.name=-1;
	R.LeftChild=NULL;
	R.RightChild=NULL;
	R.level=1;
	ConstructTree(&R);


	system("cls");
	Display(&R);

	cout<<endl;
	WhatLevel(&R);

	int max=-1;
	int maxlevel=-1;

	

	for(int i=1;levels[i]!=0;i++)
	{

		if(levels[i]>max)
		{
			max=levels[i];
			maxlevel=i;

		}

	}
	cout<<endl;
	cout<<"The level of maximum sum is: "<<maxlevel<<endl;
	cout<<"The maximum sum is: "<<max;

	_getch();
	return 0;
}

