// DS_BigIntsLL.cpp : Defines the entry point for the console application.
// Representation of Big Ints using Linked Lists

#include "stdafx.h"
#include<stdio.h>
#include<iostream>
#include<conio.h>
#include<stdlib.h>
using namespace std;

struct node
{
	int data;
	node *next;
	node *previous;
};

node *INTEGER1;
node *INTEGER2;
node *INTEGER;

void CreateBigInteger(node *&INTEGER, int thing)
{
	node *temp=INTEGER;
	node *p=new node;
	p->data=thing;

	if(temp==NULL)
	{
		INTEGER=p;
		p->next=NULL;
		p->previous=NULL;
	}
	else
	{
		while(temp->next!=NULL)
		{
			temp=temp->next;

		}
		temp->next=p;
		p->next=NULL;
		p->previous=temp;

	}
}

void ShowBigInteger(node *INTEGER)
{
	node *temp=INTEGER;
	
	if(temp==NULL)
	{
		cout<<"0";
		return;
	}
	else
	{
		while(temp!=NULL)
		{
			cout<<temp->data;
			temp=temp->next;

		}
		return;
		

	}
	

}
// Change the head to rear and vice versa

void InsertAtFront(node *&INTEGER, int thing)
{
	node *temp=INTEGER;
	node *p=new node;
	p->data=thing;


	if(temp==NULL)
	{
		INTEGER=p;
		p->next=NULL;
		p->previous=NULL;
	}
	else
	{
		p->next=INTEGER;
		INTEGER->previous=p;
		p->previous=NULL;
		INTEGER=p;
	}



}





// Add two long integers and store the result in another big integer
void Add(node *INTEGER1,node *INTEGER2, node *&INTEGER)
{
	node *temp1=INTEGER1;
	node *temp2=INTEGER2;

	// making temp1 and temp2 point to least significant digit
	while(temp1->next!=NULL)
	{
		temp1=temp1->next;
	}

	while(temp2->next!=NULL)
	{
		temp2=temp2->next;
	}

	int carry=0;
	while(temp1!=NULL && temp2!=NULL)
	{
		
		int sum=temp1->data + temp2->data + carry;
		int x;
		if(sum>=10)
		{
			x=sum-10;
		}
		else
		{
			x=sum;
		}
		//CreateBigInteger(INTEGER,x+carry);
		InsertAtFront(INTEGER,x);
		if(sum>=10)
		{
			carry=1;
		}
		else if(sum<10)
		{
			carry=0;
		
		}
		temp1=temp1->previous;
		temp2=temp2->previous;

		

	} // end of while

	if(temp1==NULL && temp2!=NULL)
	{
		while(temp2!=NULL)
		{
			int google=temp2->data + carry;
			int x=google;
			if(google>=10)
			{
				x=google-10;
			}
			else if(google<10)
			{
				x=google;
			}
			InsertAtFront(INTEGER,x);
			if(google>=10)
			{

				carry=1;
			}
			else
			{

				carry=0;
			}
			temp2=temp2->previous;


		}
		
	}

	else if(temp2==NULL && temp1!=NULL)
	{
		while(temp1!=NULL)
		{
			int google=temp1->data + carry;
			int x=google;
			if(google>=10)
			{
				x=google-10;
			}
			else if(google<10)
			{
				x=google;
			}
			InsertAtFront(INTEGER,x);
			if(google>=10)
			{
				
				carry=1;
			}
			else
			{
				
				carry=0;
			}
			temp1=temp1->previous;


		}

	}
	else if(temp1==NULL && temp2==NULL)
	{
		if(carry==1)
		{
			InsertAtFront(INTEGER,1);
			return;
		}
		else
		{
			return;
		}
	}

	if(carry==1)
	{
		InsertAtFront(INTEGER,1);
	}






}



int _tmain(int argc, _TCHAR* argv[])
{
	cout<<"Enter a Big Integer: ";
	char ch='a';

	while(ch!='\r')
	{
		ch=_getche();
		int x=(int)ch-48;
		if(ch!='\r')
		CreateBigInteger(INTEGER1,x);
		else
			break;
	}
	system("cls");

	cout<<"Enter another Big integer: ";
	ch='a';
	while(ch!='\r')
	{
		ch=_getche();
		int x=(int)ch-48;
		if(ch!='\r')
			CreateBigInteger(INTEGER2,x);
		else
			break;
	}

	system("cls");
	cout<<"The first number you have entered is: ";
	ShowBigInteger(INTEGER1);
	cout<<endl;
	cout<<"The second number you have entered is: ";
	ShowBigInteger(INTEGER2);
	cout<<endl;
	cout<<endl;
	cout<<"The sum of the two numbers is: ";
	Add(INTEGER1,INTEGER2,INTEGER);

	ShowBigInteger(INTEGER);

	


	_getch();
	return 0;
}

